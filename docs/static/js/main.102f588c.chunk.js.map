{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","components/GifgGridItem.jsx","components/GifGrid.jsx","hooks/UseFetchGifs.js","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","category","type","value","onChange","target","getGifs","a","URL","encodeURI","fetch","response","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGriditem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","UseFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAyCeA,EAtCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAELC,mBAAS,IAFJ,mBAElCC,EAFkC,KAEtBC,EAFsB,KAuBzC,OACE,sBAAMC,SAda,SAAEC,GAErBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAe,SAAAS,GAAQ,OAAMP,GAAN,mBAAqBO,OAC5CN,EAAc,MAOhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAxBoB,SAAEP,GAE1BF,EAAcE,EAAEQ,OAAOF,a,8BCTdG,EAAO,uCAAG,WAAOL,GAAP,uBAAAM,EAAA,6DAEfC,EAFe,yFAE0EC,UAAUR,GAFpF,sBAIES,MAAOF,GAJT,cAIfG,EAJe,gBAKEA,EAASC,OALX,uBAKbC,EALa,EAKbA,KAEFC,EAAQD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAXjB,kBAedL,GAfc,4CAAH,sDCYLQ,EAVK,SAAC,GAAuB,EAArBL,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAEhC,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAML,EAAMM,IAAMP,IACvB,4BAAKA,QCqBIQ,EAxBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,ECDN,SAAEA,GAAe,IAAD,EAEhBR,mBAAS,CACjCoB,KAAM,GACNc,SAAS,IAJ+B,mBAEnCC,EAFmC,KAE5BC,EAF4B,KAoB1C,OAbAC,qBAAU,WAERxB,EAASL,GACN8B,MAAM,SAAAC,GAELH,EAAS,CACPhB,KAAMmB,EACNL,SAAS,SAId,CAAE1B,IAEE2B,EDjB2BK,CAAchC,GAAlCmB,EAFkB,EAExBP,KAAcc,EAFU,EAEVA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAoDtB,IAElD0B,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SAEIH,EAAOL,KAAK,SAAAC,GAAG,OACb,wBAAC,EAAD,2BACOA,GADP,IAEEkB,IAAMlB,EAAIC,eEsBTkB,EArCM,WAAO,IAAD,EAEa1C,mBAAS,CAAC,cAFvB,mBAEjB2C,EAFiB,KAEL5C,EAFK,KAezB,OACE,qCACE,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAE7B,uBAEA,6BAEI4C,EAAWrB,KAAI,SAAAd,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MC1BpBoC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.102f588c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInputChange = ( e ) => {\r\n\r\n    setInputValue(e.target.value);\r\n\r\n  }\r\n\r\n  const handleSubmit = ( e ) => {\r\n\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n\r\n      setCategories( category => [ inputValue, ...category ] );\r\n      setInputValue('');\r\n\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={ handleSubmit }>\r\n      <input\r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange }\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","export const getGifs = async( category ) => {\r\n\r\n  const URL = `http://api.giphy.com/v1/gifs/search?api_key=7ykNRZseuzD6QtmmfODzTBsJBzcghP4h&q=${ encodeURI(category) }&limit=10`;\r\n\r\n  const response = await fetch( URL );\r\n  const { data } = await response.json();\r\n\r\n  const gifs =  data.map( img => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url\r\n    }\r\n  });\r\n\r\n  return gifs;\r\n\r\n}\r\n","import React from 'react'\r\n\r\nconst GifGriditem = ({ id, title, url }) => {\r\n\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={ url } alt={ title }/>\r\n      <p>{ title }</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GifGriditem;","import React/* , { useEffect, useState } */ from 'react'\r\nimport { UseFetchGifs } from '../hooks/UseFetchGifs';\r\nimport GifGriditem from './GifgGridItem';\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n  const { data: images, loading } = UseFetchGifs( category );\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n      { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n\r\n      <div className='card-grid'>\r\n        {\r\n          images.map( img => (\r\n            <GifGriditem\r\n              { ...img }\r\n              key={ img.id }\r\n            />\r\n          ))\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifGrid;","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const UseFetchGifs = ( category ) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n\r\n    getGifs( category )\r\n      .then( imgs => {\r\n\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        });\r\n      });\r\n\r\n  }, [ category ]);\r\n\r\n  return state;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  const [ categories, setCategories ] = useState(['One Punch']);\r\n\r\n  /* const handleAdd = () => {\r\n    const text = 'Kimetsu No Jaiba';\r\n\r\n    return setCategories([\r\n      ...categories,\r\n      text\r\n    ]);\r\n    setCategories( cats => [ ...cats, text ] );\r\n\r\n  }\r\n */\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n\r\n      <AddCategory setCategories={ setCategories } />\r\n\r\n      <hr/>\r\n\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n            <GifGrid\r\n              key={ category }\r\n              category={ category }\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}